diff --git a/src/api/wayfire/core.hpp b/src/api/wayfire/core.hpp
index d8e5430b..1988be4c 100644
--- a/src/api/wayfire/core.hpp
+++ b/src/api/wayfire/core.hpp
@@ -130,6 +130,8 @@ class compositor_core_t : public wf::object_base_t, public signal::provider_t
         wlr_xdg_foreign_registry *foreign_registry;
         wlr_xdg_foreign_v1 *foreign_v1;
         wlr_xdg_foreign_v2 *foreign_v2;
+
+        wlr_keyboard_shortcuts_inhibit_manager_v1 *keyboard_inhibit;
     } protocols;
 
     std::string to_string() const
diff --git a/src/api/wayfire/nonstd/wlroots.hpp b/src/api/wayfire/nonstd/wlroots.hpp
index 30e73674..a32a5ad0 100644
--- a/src/api/wayfire/nonstd/wlroots.hpp
+++ b/src/api/wayfire/nonstd/wlroots.hpp
@@ -44,12 +44,15 @@ extern "C"
     struct wlr_surface;
     struct wlr_texture;
     struct wlr_viewporter;
+    struct wlr_keyboard_shortcuts_inhibit_manager_v1;
+    struct wlr_keyboard_shortcuts_inhibitor_v1;
 
 #include <wlr/types/wlr_input_device.h>
 #include <wlr/types/wlr_pointer.h>
 #include <wlr/types/wlr_keyboard.h>
 #include <wlr/types/wlr_touch.h>
 #include <wlr/types/wlr_output.h>
+#include <wlr/types/wlr_keyboard_shortcuts_inhibit_v1.h>
 #include <wlr/util/box.h>
 #include <wlr/util/edges.h>
 #include <wayland-server.h>
diff --git a/src/core/core-impl.hpp b/src/core/core-impl.hpp
index 765972c2..1fd3297e 100644
--- a/src/core/core-impl.hpp
+++ b/src/core/core-impl.hpp
@@ -114,6 +114,7 @@ class compositor_core_impl_t : public compositor_core_t
     wf::wl_listener_wrapper input_inhibit_deactivated;
     wf::wl_listener_wrapper pointer_constraint_added;
     wf::wl_listener_wrapper idle_inhibitor_created;
+    wf::wl_listener_wrapper keyboard_inhibit_new;
 
     wf::output_t *active_output = nullptr;
     std::vector<std::unique_ptr<wf::view_interface_t>> views;
diff --git a/src/core/core.cpp b/src/core/core.cpp
index a3bb9f61..039c3c68 100644
--- a/src/core/core.cpp
+++ b/src/core/core.cpp
@@ -161,6 +161,26 @@ struct wlr_idle_inhibitor_t : public wf::idle_inhibitor_t
     }
 };
 
+struct wlr_keyboard_inhibitor
+{
+    wf::wl_listener_wrapper on_destroy;
+    wlr_keyboard_inhibitor(wlr_keyboard_shortcuts_inhibitor_v1 *inhibitor)
+    {
+        on_destroy.set_callback([=] (void*)
+        {
+            auto view = (wf::view_interface_t*)(inhibitor->data);
+            if (view)
+            {
+                view->view_impl->keyboard_inhibit = nullptr;
+                on_destroy.disconnect();
+            }
+
+            delete this;
+        });
+        on_destroy.connect(&inhibitor->events.destroy);
+    }
+};
+
 void wf::compositor_core_impl_t::init()
 {
     this->scene_root = std::make_shared<scene::root_node_t>();
@@ -293,6 +313,21 @@ void wf::compositor_core_impl_t::init()
     protocols.foreign_v2 = wlr_xdg_foreign_v2_create(display,
         protocols.foreign_registry);
 
+    protocols.keyboard_inhibit = wlr_keyboard_shortcuts_inhibit_v1_create(display);
+    keyboard_inhibit_new.set_callback([&] (void *data)
+    {
+        auto inhibitor = (struct wlr_keyboard_shortcuts_inhibitor_v1*)data;
+        auto& keyboard_focus = wf::get_core_impl().seat->keyboard_focus;
+        if (keyboard_focus && (keyboard_focus->priv->wsurface == inhibitor->surface))
+        {
+            keyboard_focus->view_impl->keyboard_inhibit = inhibitor;
+            wlr_keyboard_shortcuts_inhibitor_v1_activate(inhibitor);
+            inhibitor->data = keyboard_focus.get();
+            new wlr_keyboard_inhibitor(inhibitor);
+        }
+    });
+    keyboard_inhibit_new.connect(&protocols.keyboard_inhibit->events.new_inhibitor);
+
     wf_shell  = wayfire_shell_create(display);
     gtk_shell = wf_gtk_shell_create(display);
 
diff --git a/src/core/seat/keyboard.cpp b/src/core/seat/keyboard.cpp
index 6067b664..000dfbe2 100644
--- a/src/core/seat/keyboard.cpp
+++ b/src/core/seat/keyboard.cpp
@@ -6,6 +6,7 @@
 #include "pointer.hpp"
 #include "keyboard.hpp"
 #include "../core-impl.hpp"
+#include "../view/view-impl.hpp"
 #include "../../output/output-impl.hpp"
 #include "cursor.hpp"
 #include "touch.hpp"
@@ -279,6 +280,13 @@ bool wf::keyboard_t::handle_keyboard_key(uint32_t key, uint32_t state)
 
     input->locked_mods = this->get_locked_mods();
 
+    auto view = seat->keyboard_focus.get();
+    if (view && view->view_impl->keyboard_inhibit &&
+        view->view_impl->keyboard_inhibit->active)
+    {
+        return false;
+    }
+
     if (state == WLR_KEY_PRESSED)
     {
         auto session = wlr_backend_get_session(wf::get_core().backend);
@@ -323,6 +331,12 @@ bool wf::keyboard_t::handle_keyboard_key(uint32_t key, uint32_t state)
         mod_binding_key = 0;
     }
 
+    auto iv = interactive_view_from_view(view);
+    if (iv && !handled_in_plugin)
+    {
+        iv->handle_key(key, state);
+    }
+
     return handled_in_plugin;
 }
 
diff --git a/src/core/seat/pointer.cpp b/src/core/seat/pointer.cpp
index dd0ed2b0..f2ec7bf2 100644
--- a/src/core/seat/pointer.cpp
+++ b/src/core/seat/pointer.cpp
@@ -5,6 +5,7 @@
 #include "input-manager.hpp"
 #include "wayfire/scene.hpp"
 #include "wayfire/signal-definitions.hpp"
+#include "../view/view-impl.hpp"
 
 #include "../scene-priv.hpp"
 #include <wayfire/debug.hpp>
@@ -190,8 +191,15 @@ void wf::pointer_t::handle_pointer_button(wlr_event_pointer_button *ev,
             wf::get_core().focus_output(output);
         }
 
-        handled_in_binding |= input->get_active_bindings().handle_button(
-            wf::buttonbinding_t{seat->get_modifiers(), ev->button});
+        uint32_t modifiers = seat->get_modifiers();
+        auto view = seat->keyboard_focus.get();
+        if (handled_in_binding || !modifiers ||
+            !(view && view->view_impl->keyboard_inhibit &&
+              view->view_impl->keyboard_inhibit->active))
+        {
+            handled_in_binding |= input->get_active_bindings().handle_button(
+                wf::buttonbinding_t{modifiers, ev->button});
+        }
     } else
     {
         count_pressed_buttons--;
@@ -315,8 +323,20 @@ void wf::pointer_t::handle_pointer_motion_absolute(
 void wf::pointer_t::handle_pointer_axis(wlr_event_pointer_axis *ev,
     input_event_processing_mode_t mode)
 {
-    bool handled_in_binding = input->get_active_bindings().handle_axis(
-        seat->get_modifiers(), ev);
+    uint32_t modifiers = seat->get_modifiers();
+
+    bool handled_in_binding = false;
+    auto view = seat->keyboard_focus.get();
+    if (!input->active_grab && modifiers &&
+        (view && view->view_impl->keyboard_inhibit &&
+         view->view_impl->keyboard_inhibit->active))
+    {
+        // do not use for binding
+    } else
+    {
+        handled_in_binding = input->get_active_bindings().handle_axis(modifiers, ev);
+    }
+
     seat->break_mod_bindings();
 
     if (input->active_grab)
diff --git a/src/view/view-impl.hpp b/src/view/view-impl.hpp
index 3b7264a4..dcf974be 100644
--- a/src/view/view-impl.hpp
+++ b/src/view/view-impl.hpp
@@ -84,6 +84,8 @@ class view_interface_t::view_priv_impl
     std::shared_ptr<scene::view_node_t> surface_root_node;
     bool actually_minimized = false;
 
+    struct wlr_keyboard_shortcuts_inhibitor_v1 *keyboard_inhibit = nullptr;
+
   private:
     /** Last geometry the view has had in non-tiled and non-fullscreen state.
      * -1 as width/height means that no such geometry has been stored. */
