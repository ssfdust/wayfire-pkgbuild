diff --git a/src/core/core.cpp b/src/core/core.cpp
index a02dfbfa..9c7e929d 100644
--- a/src/core/core.cpp
+++ b/src/core/core.cpp
@@ -404,6 +404,8 @@ pid_t wf::compositor_core_impl_t::run(std::string command)
                 close(dev_null);
             }
 
+            restore_nofile_limit();
+
             _exit(execl("/bin/sh", "/bin/sh", "-c", command.c_str(), NULL));
         } else
         {
diff --git a/src/main.cpp b/src/main.cpp
index d08453b6..173d0687 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -234,6 +234,37 @@ void parse_extended_debugging(const std::vector<std::string>& categories)
 // }
 // }
 //
+
+static void increase_nofile_limit(void)
+{
+    if (getrlimit(RLIMIT_NOFILE, &original_nofile_rlimit) != 0)
+    {
+        LOGE("Failed to bump max open files limit: getrlimit(NOFILE) failed");
+        return;
+    }
+
+    struct rlimit new_rlimit = original_nofile_rlimit;
+    new_rlimit.rlim_cur = new_rlimit.rlim_max;
+    if (setrlimit(RLIMIT_NOFILE, &new_rlimit) != 0)
+    {
+        LOGE("Failed to bump max open files limit: setrlimit(NOFILE) failed");
+        LOGI("Running with %d max open files", (int)original_nofile_rlimit.rlim_cur);
+    }
+}
+
+void restore_nofile_limit(void)
+{
+    if (original_nofile_rlimit.rlim_cur == 0)
+    {
+        return;
+    }
+
+    if (setrlimit(RLIMIT_NOFILE, &original_nofile_rlimit) != 0)
+    {
+        LOGE("Failed to restore max open files limit: setrlimit(NOFILE) failed");
+    }
+}
+
 int main(int argc, char *argv[])
 {
     wf::log::log_level_t log_level = wf::log::LOG_LEVEL_INFO;
@@ -379,6 +410,8 @@ int main(int argc, char *argv[])
         return EXIT_FAILURE;
     }
 
+    increase_nofile_limit();
+
     auto backend = load_backend(config_backend);
     if (!backend)
     {
diff --git a/src/main.hpp b/src/main.hpp
index 93d5f276..26d86978 100644
--- a/src/main.hpp
+++ b/src/main.hpp
@@ -1,10 +1,16 @@
 #ifndef MAIN_HPP
 #define MAIN_HPP
 
+#include <sys/resource.h>
+
 extern struct wf_runtime_config
 {
     bool no_damage_track = false;
     bool damage_debug    = false;
 } runtime_config;
 
+void restore_nofile_limit(void);
+
+static struct rlimit original_nofile_rlimit;
+
 #endif /* end of include guard: MAIN_HPP */
